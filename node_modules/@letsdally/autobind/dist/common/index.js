"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoBind = exports.autobind = void 0;
/* eslint-disable security/detect-object-injection */
/* eslint-disable @typescript-eslint/ban-types */
var isPlainObject_1 = __importDefault(require("lodash/isPlainObject"));
var getAllProperties = function (object) {
    var e_1, _a;
    var properties = new Set();
    do {
        try {
            for (var _b = (e_1 = void 0, __values(Reflect.ownKeys(object))), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                properties.add([object, key]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    } while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);
    return properties;
};
var autoBind = function (self, inclExcl, thisValue) {
    var e_2, _a;
    if (inclExcl === void 0) { inclExcl = {}; }
    var include = inclExcl.include, exclude = inclExcl.exclude;
    var filter = function (key) {
        var match = function (pattern) { return (typeof pattern === 'string' ? key === pattern : pattern.test(key)); };
        if (include) {
            return include.some(match);
        }
        if (exclude) {
            return !exclude.some(match);
        }
        return true;
    };
    try {
        for (var _b = __values(getAllProperties(self)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), object = _d[0], key = _d[1];
            if (key === 'constructor' || !filter(key)) {
                continue;
            }
            var descriptor = Reflect.getOwnPropertyDescriptor(object, key);
            if (descriptor && typeof descriptor.value === 'function') {
                self[key] = self[key].bind(thisValue || self);
            }
            if (isPlainObject_1.default(self[key])) {
                autoBind(self[key], inclExcl, self);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return self;
};
exports.autoBind = autoBind;
var autobind = autoBind;
exports.autobind = autobind;
exports.default = autobind;
